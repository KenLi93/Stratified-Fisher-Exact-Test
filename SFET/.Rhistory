groups <- expand.grid(1:3, 1:2)
data <- cbind(n = rep(100, 6),
x = rep(50, 6),
groups)
names(data) <- c("n", "x", "strata", "treatment")
strata = c(1:3, 1:3)
treatment = rep(1:2, 3)
nsubjects = rep(100, 6)
nresponders = rep(50, 6)
case = 2
## case: specify which group is case
statifiedFisherTest <- function(strata, treatment, nsubjects, nresponders,
case, side = c("up", "lower", "both")){
nstrata <- length(unique(strata))
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
s <- sum(nresponders[treatment == case])
data.strata <- split(data, data$strata)
x <- sapply(data.strata, function(tab) with(tab, nresponders[treatment == case])) ## responders in the treatment group
z <- sapply(data.strata, function(tab) with(tab, sum(nresponders))) ## total number of responders
n <- sapply(data.strata, function(tab) with(tab, sum(nsubjects))) ## total number of subjects in each stratum
m <- sapply(data.strata, function(tab) with(tab, nsubjects[treatment == case])) ## subjects in the treatment group
m_lower <- pmax(0, z-n+m)
m_upper <- pmin(z, m)
x_prob <- x_range <- vector(mode = "list", length = nstrata)
for(i in 1:nstrata){
x_range[[i]] <- m_lower[i]:m_upper[i]
}
for(i in 1:nstrata){
x_prob[[i]] <- dhyper(x_range[[i]], m = m[i], n = n[i] - m[i], k = z[i], log=TRUE)
}
#  pv <- 0
x_grid <- rowSums(expand.grid(x_range))
x_prob_grid <- exp(rowSums(expand.grid(x_prob)))
if (side == "up") {
pv <- sum( x_prob_grid [ x_grid>= s ] )
} else if (side == "lower") {
pv <- sum( x_prob_grid [ x_grid<= s ] )
} else if (side == "both") {
pv.up <- pv.lower <- 0
for(i in 1:nrow(x_grid)){
if(sum(x_grid[i,]) >= s) pv.up <- pv.up + prod(x_prob_grid[i,])
if(sum(x_grid[i,]) <= s) pv.lower <- pv.lower + prod(x_prob_grid[i,])
}
pv <- 2 * min(pv.up, pv.lower)
} else {
stop("side should be one of \"up\", \"lower\" or \"both\".")
}
return(pv)
}
system.time(pv.up <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "up"))
pv.up
system.time(pv.lower <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "lower"))
system.time(pv.both <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "both"))
system.time(pv.up <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "up"))
system.time(pv.lower <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "lower"))
system.time(pv.both <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "both"))
nstrata
data
pv.lower
system.time(pv.both <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "both"))
x_grid
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
groups <- expand.grid(1:3, 1:2)
data <- cbind(n = rep(100, 6),
x = rep(50, 6),
groups)
names(data) <- c("n", "x", "strata", "treatment")
strata = c(1:3, 1:3)
treatment = rep(1:2, 3)
nsubjects = rep(100, 6)
nresponders = rep(50, 6)
case = 2
## case: specify which group is case
statifiedFisherTest <- function(strata, treatment, nsubjects, nresponders,
case, side = c("up", "lower", "both")){
nstrata <- length(unique(strata))
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
s <- sum(nresponders[treatment == case])
data.strata <- split(data, data$strata)
x <- sapply(data.strata, function(tab) with(tab, nresponders[treatment == case])) ## responders in the treatment group
z <- sapply(data.strata, function(tab) with(tab, sum(nresponders))) ## total number of responders
n <- sapply(data.strata, function(tab) with(tab, sum(nsubjects))) ## total number of subjects in each stratum
m <- sapply(data.strata, function(tab) with(tab, nsubjects[treatment == case])) ## subjects in the treatment group
m_lower <- pmax(0, z-n+m)
m_upper <- pmin(z, m)
x_prob <- x_range <- vector(mode = "list", length = nstrata)
for(i in 1:nstrata){
x_range[[i]] <- m_lower[i]:m_upper[i]
}
for(i in 1:nstrata){
x_prob[[i]] <- dhyper(x_range[[i]], m = m[i], n = n[i] - m[i], k = z[i], log=TRUE)
}
#  pv <- 0
x_grid <- rowSums(expand.grid(x_range))
x_prob_grid <- exp(rowSums(expand.grid(x_prob)))
if (side == "up") {
pv <- sum( x_prob_grid [ x_grid>= s ] )
} else if (side == "lower") {
pv <- sum( x_prob_grid [ x_grid<= s ] )
} else if (side == "both") {
pv.up <- pv.lower <- 0
for(i in 1:length(x_grid)){
if(sum(x_grid[i,]) >= s) pv.up <- pv.up + prod(x_prob_grid[i,])
if(sum(x_grid[i,]) <= s) pv.lower <- pv.lower + prod(x_prob_grid[i,])
}
pv <- 2 * min(pv.up, pv.lower)
} else {
stop("side should be one of \"up\", \"lower\" or \"both\".")
}
return(pv)
}
system.time(pv.both <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "both"))
system.time(pv.both <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "both"))
pv.up <- sum( x_prob_grid [ x_grid>= s ] )
## case: specify which group is case
statifiedFisherTest <- function(strata, treatment, nsubjects, nresponders,
case, side = c("up", "lower", "both")){
nstrata <- length(unique(strata))
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
s <- sum(nresponders[treatment == case])
data.strata <- split(data, data$strata)
x <- sapply(data.strata, function(tab) with(tab, nresponders[treatment == case])) ## responders in the treatment group
z <- sapply(data.strata, function(tab) with(tab, sum(nresponders))) ## total number of responders
n <- sapply(data.strata, function(tab) with(tab, sum(nsubjects))) ## total number of subjects in each stratum
m <- sapply(data.strata, function(tab) with(tab, nsubjects[treatment == case])) ## subjects in the treatment group
m_lower <- pmax(0, z-n+m)
m_upper <- pmin(z, m)
x_prob <- x_range <- vector(mode = "list", length = nstrata)
for(i in 1:nstrata){
x_range[[i]] <- m_lower[i]:m_upper[i]
}
for(i in 1:nstrata){
x_prob[[i]] <- dhyper(x_range[[i]], m = m[i], n = n[i] - m[i], k = z[i], log=TRUE)
}
#  pv <- 0
x_grid <- rowSums(expand.grid(x_range))
x_prob_grid <- exp(rowSums(expand.grid(x_prob)))
if (side == "up") {
pv <- sum( x_prob_grid [ x_grid>= s ] )
} else if (side == "lower") {
pv <- sum( x_prob_grid [ x_grid<= s ] )
} else if (side == "both") {
pv.up <- sum( x_prob_grid [ x_grid>= s ] )
pv.lower <- sum( x_prob_grid [ x_grid<= s ] )
pv <- 2 * min(pv.up, pv.lower)
} else {
stop("side should be one of \"up\", \"lower\" or \"both\".")
}
return(pv)
}
system.time(pv.up <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "up"))
system.time(pv.lower <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "lower"))
system.time(pv.both <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "both"))
pv.both
groups <- expand.grid(1:3, 1:2)
data <- cbind(n = rep(100, 6),
x = rep(50, 6),
groups)
names(data) <- c("n", "x", "strata", "treatment")
strata = c(1:3, 1:3)
treatment = rep(1:2, 3)
nsubjects = rep(100, 6)
nresponders = rep(50, 6)
case = 2
## case: specify which group is case
statifiedFisherTest <- function(strata, treatment, nsubjects, nresponders,
case, side = c("up", "lower", "both")){
nstrata <- length(unique(strata))
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
s <- sum(nresponders[treatment == case])
data.strata <- split(data, data$strata)
x <- sapply(data.strata, function(tab) with(tab, nresponders[treatment == case])) ## responders in the treatment group
z <- sapply(data.strata, function(tab) with(tab, sum(nresponders))) ## total number of responders
n <- sapply(data.strata, function(tab) with(tab, sum(nsubjects))) ## total number of subjects in each stratum
m <- sapply(data.strata, function(tab) with(tab, nsubjects[treatment == case])) ## subjects in the treatment group
m_lower <- pmax(0, z-n+m)
m_upper <- pmin(z, m)
x_prob <- x_range <- vector(mode = "list", length = nstrata)
for(i in 1:nstrata){
x_range[[i]] <- m_lower[i]:m_upper[i]
}
for(i in 1:nstrata){
x_prob[[i]] <- dhyper(x_range[[i]], m = m[i], n = n[i] - m[i], k = z[i], log=TRUE)
}
#  pv <- 0
x_grid <- rowSums(expand.grid(x_range))
x_prob_grid <- exp(rowSums(expand.grid(x_prob)))
if (side == "up") {
pv <- sum( x_prob_grid [ x_grid>= s ] )
} else if (side == "lower") {
pv <- sum( x_prob_grid [ x_grid<= s ] )
} else if (side == "both") {
pv.up <- sum( x_prob_grid [ x_grid>= s ] )
pv.lower <- sum( x_prob_grid [ x_grid<= s ] )
pv <- min(1, 2 * min(pv.up, pv.lower))
} else {
stop("side should be one of \"up\", \"lower\" or \"both\".")
}
return(pv)
}
system.time(pv.up <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "up"))
system.time(pv.lower <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "lower"))
system.time(pv.both <- statifiedFisherTest(strata, treatment, nsubjects, nresponders,
case = 2, side = "both"))
save(list = c("pv.up", "pv.lower", "pv.both"), file = "fisher_pvalue.RData")
pv.up
pv.lower
pv.both
install.packages("devtools")
library("devtools")
install_github("klutometic/roxygen")
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
setwd("//fs2-vip-nfs.nfs.biost.priv/students/qijunl2/Documents/UW/Ken/R_package/SFET")
document()
install("SFET")
setwd("..")
getwd()
install("SFET")
library(SFET)
?SFET
setwd("./SFET")
document
document()
library("devtools")
install_github("adw64/breakaway")
install_github("adw96/breakaway")
install.packages("phyloseq")
library("phyloseq")
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
?fisher.test
fisher.test
SFET <- function(strata, treatment, nsubjects, nresponders,
case, side = c("up", "lower", "both")){
nstrata <- length(unique(strata))
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
s <- sum(nresponders[treatment == case])
data.strata <- split(data, data$strata)
x <- sapply(data.strata, function(tab) with(tab, nresponders[treatment == case])) ## responders in the treatment group
z <- sapply(data.strata, function(tab) with(tab, sum(nresponders))) ## total number of responders
n <- sapply(data.strata, function(tab) with(tab, sum(nsubjects))) ## total number of subjects in each stratum
m <- sapply(data.strata, function(tab) with(tab, nsubjects[treatment == case])) ## subjects in the treatment group
m_lower <- pmax(0, z-n+m)
m_upper <- pmin(z, m)
x_prob <- x_range <- vector(mode = "list", length = nstrata)
for(i in 1:nstrata){
x_range[[i]] <- m_lower[i]:m_upper[i]
}
for(i in 1:nstrata){
x_prob[[i]] <- dhyper(x_range[[i]], m = m[i], n = n[i] - m[i], k = z[i], log=TRUE)
}
#  pv <- 0
x_grid <- rowSums(expand.grid(x_range))
x_prob_grid <- exp(rowSums(expand.grid(x_prob)))
if (side == "up") {
pv <- sum( x_prob_grid [ x_grid>= s ] )
} else if (side == "lower") {
pv <- sum( x_prob_grid [ x_grid<= s ] )
} else if (side == "both") {
pv.up <- sum( x_prob_grid [ x_grid>= s ] )
pv.lower <- sum( x_prob_grid [ x_grid<= s ] )
pv <- min(1, 2 * min(pv.up, pv.lower))
} else {
stop("side should be one of \"up\", \"lower\" or \"both\".")
}
return(pv)
}
strata = c(1:3, 1:3)
strata
treatment = rep(1:2, 3)
treatment
?treatment
treatment = rep(1:2, each = 3)
treatment
strata = c(1:3, 1:3)
treatment = rep(1:2, each = 3)
nsubjects = c(11, 9, 8, 13, 12, 10)
nresponders = rep(10, 12, 9, 11, 8, 7)
case = 1
system.time(pv.up <- SFET(strata, treatment, nsubjects, nresponders, case = 2, side = "up"))
nresponders = c(10, 12, 9, 11, 8, 7)
system.time(pv.up <- SFET(strata, treatment, nsubjects, nresponders, case = 2, side = "up"))
pv.up
system.time(pv.lower <- SFET(strata, treatment, nsubjects, nresponders, case = 2, side = "lower"))
pv.lower
strata = c(1,1,2,2,3,3)
treatment = c(1,2,1,2,1,2)
nsubjects = c(11, 13, 9, 12, 8, 10)
nresponders = c(10, 12, 9, 11, 8, 7)
case = 1
system.time(pv.up <- SFET(strata, treatment, nsubjects, nresponders, case = 2, side = "up"))
system.time(pv.lower <- SFET(strata, treatment, nsubjects, nresponders, case = 2, side = "lower"))
setwd("//fs2-vip-nfs.nfs.biost.priv/students/qijunl2/Documents/UW/Amy/code&outputs")
library(simulator)
install.packages("simulator")
libary(simulator)
libruary(simulator)
library(simulator)
dir <- "./sim-10-11"
create(dir)
setwd(dir)
list.files()
lm
?match
match.call
?match.call
lirary(glmnet)
library(glmnet)
install.packages("glmnet")
library(glmnet)
glmnet()
glmnet
?lm
with
with:::with
base:::with
lm
?match.call
call("get", "abc", i = FALSE, p = 3)
get("abc", i = F, p = 3)
match.call(get, call("get", "abc", i = FALSE, p = 3))
?structure
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = match.call())
}
fun(4 * atan(1), u = pi)
lm
data = (x = 1:5, y = 2:6)
data = data.frame(x = 1:5, y = 2:6)
data
ddd <- function (formula, data, subset, weights, na.action, method = "qr",
model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE,
contrasts = NULL, offset, ...)
{
ret.x <- x
ret.y <- y
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "weights", "na.action",
"offset"), names(mf), 0L)
list(m = m, mf = mf)
}
ddd(y~x, data = data)
ddd <- function (formula, data, subset, weights, na.action, method = "qr",
model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE,
contrasts = NULL, offset, ...)
{
ret.x <- x
ret.y <- y
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "weights", "na.action",
"offset"), names(mf), 0L)
list(m = m, mf = mf, names(mf))
}
ddd(y~x, data)
lm
dd <- ddd(y~x, data)
dd
str(dd[[2]])
dd[1]
dd[[2]][1]
dd[[2]][2]
dd[[2]][3]
lm
?parent.frame
?quote
quote(stats::model.frame)
?model.frame
model.frame(y~x)
y
x
model.frame(data$y~data$x)
model.frame(y~x, data = data)
ddd
dd
m <- dd$m
mf <- dd$mf
mf
mf[c(1L,m)]
mf
mf[1]
mf[2]
m
mf[3]
mf[1:3]
mf <- mf[c(1L, m)]
mf
mf$drop.unused.levels <- TRUE
mf
mf[[1]]
mf[[2]]
mf[[1L]] <- quote(stats::model.frame)
mf
mf <- eval(mf, parent.frame())
mf
mt <- attr(mf, "terms")
mt
y <- model.response(mf, "numeric")
y
w <- as.vector(model.weights(mf))
w
ddd <- function (formula, data, subset, weights, na.action, method = "qr",
model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE,
contrasts = NULL, offset, ...)
{
ret.x <- x
ret.y <- y
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "weights", "na.action",
"offset"), names(mf), 0L)
list(cl = cl, m = m, mf = mf, names(mf))
}
ddd(y~x, data)
lm
strata = c(1,1,2,2,3,3)
treatment = c(1,2,1,2,1,2)
nsubjects = c(11, 13, 9, 12, 8, 10)
nresponders = c(10, 12, 9, 11, 8, 7)
case = 1
data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
data <- data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders)
data
with(NULL,  data.frame(strata = strata, treatment = treatment,
nsubjects = nsubjects, nresponders = nresponders))
?fisher.test
install.packages("AUtests")
library(AUtests)
perm.test.strat
